generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int                @id @default(autoincrement())
  username     String             @db.VarChar(50)
  email        String             @db.VarChar(50)
  isVerified   Boolean            @default(false)
  phoneNum     String?            @db.VarChar(10)
  isNotified   Boolean            @default(false)
  googleId     String             @unique
  groupId      Int?
  image        image[]
  // post       post[]
  reminder     reminder[]
  // suggestion suggestion[]
  group        group?             @relation(fields: [groupId], references: [id])
  vote         vote[]
  itinerary    itinerary[]
  suggestion   userOnsuggestion[]
  suggestionId Int?

  @@index([groupId], map: "user_groupId_fkey")
}

model userOnsuggestion {
  id           Int         @id @default(autoincrement())
  user         user?       @relation(fields: [userId], references: [id])
  suggestion   suggestion? @relation(fields: [suggestionId], references: [id])
  userId       Int?
  suggestionId Int?
}

model suggestion {
  id            Int                @id @default(autoincrement())
  title         String             @db.VarChar(120)
  upVotes       Int?
  downVotes     Int?
  created_at    DateTime           @default(now())
  timeAvailable String?
  cost          Int?
  address       String             @db.VarChar(100)
  description   String             @db.Text
  image         String?            @db.Text
  phoneNum      String?            @db.VarChar(50)
  userId        Int?
  latitude      String?
  longitude     String?
  wishUser      userOnsuggestion[]
  // activity      activity[]
  location      location[]
  // user          user?      @relation(fields: [userId], references: [id])

  @@index([userId], map: "suggestion_userId_fkey")
}

model itinerary {
  id        Int        @id @default(autoincrement())
  member_id Int
  name      String     @db.VarChar(50)
  begin     DateTime
  end       DateTime
  upVotes   Int
  downVotes Int
  createdAt DateTime
  notes     String     @db.VarChar(150)
  route     route[]
  activity  activity[]
  creator   user?      @relation(fields: [creatorId], references: [id])
  creatorId Int?
}

model activity {
  id          Int        @id @default(autoincrement())
  // participant  Int?
  name        String?    @db.VarChar(50)
  description String     @db.VarChar(200)
  phone       String?    @db.VarChar(150)
  // creatorId    Int?
  // suggestionId Int?
  // locationId   Int?
  time        String?
  date        String?
  address     String?
  location    String?
  image       String?
  itinerary   itinerary? @relation(fields: [itineraryId], references: [id])
  // location     location?   @relation(fields: [locationId], references: [id])
  // suggestion   suggestion? @relation(fields: [suggestionId], references: [id])
  // image        image[]
  // reminder     reminder[]

  // @@index([locationId], map: "activity_locationId_fkey")
  // @@index([suggestionId], map: "activity_suggestionId_fkey")
  itineraryId Int?
}

model location {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(50)
  description  String      @db.VarChar(255)
  address      String      @db.VarChar(50)
  latitude     Decimal
  longitude    Decimal
  suggestionId Int?
  // activity     activity[]
  suggestion   suggestion? @relation(fields: [suggestionId], references: [id])

  @@index([suggestionId], map: "location_suggestionId_fkey")
}

model route {
  id          Int        @id @default(autoincrement())
  travelTime  String
  // walkingTravelTime String?
  destination String
  origin      String
  itinerary   itinerary? @relation(fields: [itineraryId], references: [id])

  itineraryId Int?
}

model vote {
  id            Int     @id @default(autoincrement())
  vote_polarity Boolean
  vote_topic    String  @db.VarChar(25)
  voted_item_id Int
  userId        Int?
  user          user?   @relation(fields: [userId], references: [id])

  @@index([userId], map: "vote_userId_fkey")
}

model interest {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(25)
}

model group {
  itinerary_id Int      @unique
  activity_id  Int
  id           Int      @id @default(autoincrement())
  budget       budget[]
  user_id      user[]
}

model reminder {
  id           Int      @id @default(autoincrement())
  call_time    DateTime
  call_message String   @db.VarChar(40)
  userId       Int?
  activityId   Int?
  // activity     activity? @relation(fields: [activityId], references: [id])
  user         user?    @relation(fields: [userId], references: [id])

  @@index([activityId], map: "reminder_activityId_fkey")
  @@index([userId], map: "reminder_userId_fkey")
}

model image {
  id         Int    @id @default(autoincrement())
  url        String @db.TinyText
  notes      String @db.VarChar(255)
  activityId Int?
  userId     Int?
  // activity   activity? @relation(fields: [activityId], references: [id])
  user       user?  @relation(fields: [userId], references: [id])

  @@index([activityId], map: "image_activityId_fkey")
  @@index([userId], map: "image_userId_fkey")
}

model budget {
  id                Int      @id @default(autoincrement())
  spent             Decimal
  notes             String   @db.VarChar(255)
  createdAt         DateTime @default(now())
  limit             Decimal
  updatedAt         DateTime @updatedAt
  groupItinerary_id Int?
  group             group?   @relation(fields: [groupItinerary_id], references: [itinerary_id])
  category          String   @default("")

  @@index([groupItinerary_id], map: "budget_groupItinerary_id_fkey")
}

/**
 * model post {
 * id           Int      @id @default(autoincrement())
 * title        String   @db.Text
 * content      String   @db.Text
 * createdAt    DateTime @default(now())
 * updatedAt    DateTime @default(now())
 * authorId     Int?
 * location     String?
 * latitude     Decimal?
 * longitude    Decimal?
 * category     String?
 * Tags         String?
 * suggestionId Int?
 * author       user?    @relation(fields: [authorId], references: [id])
 * @@index([authorId], map: "post_authorId_fkey")
 * }
 */

model chatHistory {
  id               Int      @id @default(autoincrement())
  userId           Int? // 
  sessionId        String   @unique // Session identifier
  conversationName String?  @db.VarChar(255) // Allow naming
  lastActive       DateTime @default(now())

  messages message[] @relation("ChatHistoryToMessage")
}

model message {
  id          Int      @id @default(autoincrement())
  userId      Int?
  userMessage String   @db.Text
  botResponse String   @db.LongText
  timeStamp   DateTime @default(now())
  sessionId   String   @db.VarChar(100)

  ChatHistory chatHistory @relation("ChatHistoryToMessage", fields: [sessionId], references: [sessionId])
}
