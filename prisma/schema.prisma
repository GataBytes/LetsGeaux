generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int                @id @default(autoincrement())
  username     String             @db.VarChar(50)
  email        String             @db.VarChar(50)
  isVerified   Boolean            @default(false)
  phoneNum     String?            @db.VarChar(10)
  isNotified   Boolean            @default(false)
  googleId     String             @unique
  image        image[]
  profilePic   String?            @db.VarChar(150)
  // memberId...
  reminder     reminder[]
  vote         vote[]
  itinerary    itinerary[]
  suggestion   userOnsuggestion[]
  suggestionId Int?
  userInterest userInterest[]

  userParty userParty[]
  post      post[]
  comment   comment[]
}

model userParty {
  id      Int   @id @default(autoincrement())
  user    user  @relation(fields: [userId], references: [id])
  party   party @relation(fields: [partyId], references: [id])
  userId  Int
  partyId Int
}

model userOnsuggestion {
  id           Int         @id @default(autoincrement())
  user         user?       @relation(fields: [userId], references: [id])
  suggestion   suggestion? @relation(fields: [suggestionId], references: [id])
  userId       Int?
  suggestionId Int?
}

model suggestion {
  id            Int                @id @default(autoincrement())
  title         String             @db.VarChar(120)
  upVotes       Int?
  downVotes     Int?
  created_at    DateTime           @default(now())
  timeAvailable String?
  cost          Int?
  address       String?            @db.VarChar(100)
  description   String?            @db.Text
  image         String?            @db.Text
  phoneNum      String?            @db.VarChar(50)
  userId        Int?
  latitude      String?
  longitude     String?
  wishUser      userOnsuggestion[]
  vote          vote[]

  @@index([userId], map: "suggestion_userId_fkey")
}

model post {
  id   Int  @id @default(autoincrement())
  user user @relation(fields: [userId], references: [id])

  userId Int
  vote   vote[]
}

model comment {
  id   Int  @id @default(autoincrement())
  user user @relation(fields: [userId], references: [id])

  userId Int
  vote   vote[]
}

model itinerary {
  id        Int        @id @default(autoincrement())
  partyId   Int?
  name      String     @db.VarChar(50)
  begin     DateTime
  end       DateTime
  upVotes   Int
  downVotes Int
  createdAt DateTime
  notes     String     @db.VarChar(150)
  creatorId Int?
  activity  activity[]
  creator   user?      @relation(fields: [creatorId], references: [id])
  route     route[]
  party     party?     @relation(fields: [partyId], references: [id])
  viewCode  String     @unique

  @@index([creatorId], map: "itinerary_creatorId_fkey")
}

model activity {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar(100)
  description String?    @db.VarChar(500)
  address     String?
  phone       String?    @db.VarChar(150)
  time        String?
  date        String?
  image       String?
  location    String?
  itineraryId Int?
  itinerary   itinerary? @relation(fields: [itineraryId], references: [id])

  @@index([itineraryId], map: "activity_itineraryId_fkey")
}

model route {
  id          Int        @id @default(autoincrement())
  destination String
  origin      String
  travelTime  String
  itineraryId Int?
  itinerary   itinerary? @relation(fields: [itineraryId], references: [id])

  @@index([itineraryId], map: "route_itineraryId_fkey")
}

model vote {
  id           Int         @id @default(autoincrement())
  post         post?       @relation(fields: [postId], references: [id])
  comment      comment?    @relation(fields: [commentId], references: [id])
  suggestion   suggestion? @relation(fields: [suggestionId], references: [id])
  userId       Int
  user         user?       @relation(fields: [userId], references: [id])
  postId       Int?
  polarity     Int
  commentId    Int?
  suggestionId Int?

  @@index([userId], map: "vote_userId_fkey")
}

model interest {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(25)
  userInterest userInterest[]
}

model userInterest {
  id         Int      @id @default(autoincrement())
  user       user     @relation(fields: [userId], references: [id])
  interest   interest @relation(fields: [interestId], references: [id])
  userId     Int
  interestId Int
}

model party {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  itineraryId Int?
  itinerary   itinerary[]
  image       image[]
  userParty   userParty[]
  budget      budget[]
}

model reminder {
  id           Int      @id @default(autoincrement())
  call_time    DateTime
  call_message String   @db.VarChar(255)
  userId       Int?
  activityId   Int?
  user         user?    @relation(fields: [userId], references: [id])

  @@index([activityId], map: "reminder_activityId_fkey")
  @@index([userId], map: "reminder_userId_fkey")
}

model image {
  id         Int     @id @default(autoincrement())
  url        String  @db.Text
  notes      String? @db.VarChar(255)
  activityId Int?
  userId     Int?
  party      party?  @relation(fields: [partyId], references: [id])
  user       user?   @relation(fields: [userId], references: [id])
  partyId    Int?

  @@index([activityId], map: "image_activityId_fkey")
  @@index([userId], map: "image_userId_fkey")
}

model budget {
  id        Int      @id @default(autoincrement())
  spent     Decimal
  notes     String   @db.VarChar(255)
  // groupItinerary_id Int?
  createdAt DateTime @default(now())
  limit     Decimal
  updatedAt DateTime @updatedAt
  category  String   @default("")
  party     party?   @relation(fields: [partyId], references: [id]) //@relation(fields: [groupItinerary_id], references: [itinerary_id])

  // @@index([groupItinerary_id], map: "budget_groupItinerary_id_fkey")
  partyId Int?
}

model chatHistory {
  id               Int      @id @default(autoincrement())
  userId           Int? //
  sessionId        String   @unique // Session identifier
  conversationName String?  @db.VarChar(255) // Allow naming
  lastActive       DateTime @default(now())

  messages message[] @relation("ChatHistoryToMessage")
}

model message {
  id          Int      @id @default(autoincrement())
  userId      Int?
  userMessage String   @db.Text
  botResponse String   @db.LongText
  timeStamp   DateTime @default(now())
  sessionId   String   @db.VarChar(100)

  ChatHistory chatHistory @relation("ChatHistoryToMessage", fields: [sessionId], references: [sessionId])
}
